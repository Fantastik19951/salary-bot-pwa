import { useState, useEffect, useRef } from 'react'
import { useNavigate } from 'react-router-dom'
import { Box, Card, Typography, Stack, IconButton, TextField, Button, ToggleButtonGroup, ToggleButton, alpha, Autocomplete, Chip, Switch, FormControlLabel } from '@mui/material'
import { ArrowBack, Check, FastForward, ListAlt } from '@mui/icons-material'
import { useAppStore } from '../store/appStore'
import { haptics } from '../utils/haptics'

export default function QuickAddEntry() {
  const navigate = useNavigate()
  const { entries, addEntry, syncData } = useAppStore()
  
  const [quickMode, setQuickMode] = useState(true)
  const [type, setType] = useState<'amount' | 'salary'>('amount')
  const [singleInput, setSingleInput] = useState('')
  const [nameInput, setNameInput] = useState('')
  const [amountInput, setAmountInput] = useState('')
  const [date, setDate] = useState(() => {
    const today = new Date()
    return `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today.getDate().toString().padStart(2, '0')}`
  })
  const [addedCount, setAddedCount] = useState(0)
  const [todayTotal, setTodayTotal] = useState(0)
  
  const inputRef = useRef<HTMLInputElement>(null)
  
  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å
  useEffect(() => {
    setTimeout(() => inputRef.current?.focus(), 100)
  }, [])

  // –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (—Ç–æ–ø 10)
  const clientSuggestions = Array.from(
    new Set(
      Object.values(entries)
        .flat()
        .filter((e: any) => e.symbols && e.amount)
        .map((e: any) => e.symbols.trim())
    )
  ).slice(0, 10)

  // –ü–∞—Ä—Å–∏–Ω–≥: "5000 –ò–≤–∞–Ω–æ–≤" –∏–ª–∏ "–ò–≤–∞–Ω–æ–≤ 5000"
  const parseInput = (input: string): { amount: number; name: string } | null => {
    const trimmed = input.trim()
    if (!trimmed) return null

    // –ü–æ–ø—ã—Ç–∫–∞ 1: "5000 –ò–≤–∞–Ω–æ–≤"
    const match1 = trimmed.match(/^(\d+(?:\.\d+)?)\s+(.+)$/)
    if (match1) {
      return { amount: parseFloat(match1[1]), name: match1[2].trim() }
    }

    // –ü–æ–ø—ã—Ç–∫–∞ 2: "–ò–≤–∞–Ω–æ–≤ 5000"
    const match2 = trimmed.match(/^(.+?)\s+(\d+(?:\.\d+)?)$/)
    if (match2) {
      return { amount: parseFloat(match2[2]), name: match2[1].trim() }
    }

    return null
  }

  const handleQuickAdd = async () => {
    let name: string
    let amount: number

    if (quickMode) {
      // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –ø–∞—Ä—Å–∏–º –µ–¥–∏–Ω–æ–µ –ø–æ–ª–µ
      if (type === 'salary') {
        // –î–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ: —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞, –∏–º—è = "–ó–ê–†–ü–õ–ê–¢–ê"
        const amountValue = parseFloat(singleInput.trim())
        if (isNaN(amountValue) || amountValue <= 0) {
          haptics.error()
          return
        }
        name = '–ó–ê–†–ü–õ–ê–¢–ê'
        amount = amountValue
      } else {
        // –î–ª—è –æ–±–æ—Ä–æ—Ç–∞: –ø–∞—Ä—Å–∏–º "—Å—É–º–º–∞ –∏–º—è" –∏–ª–∏ "–∏–º—è —Å—É–º–º–∞"
        const parsed = parseInput(singleInput)
        if (!parsed) {
          haptics.error()
          return
        }
        name = parsed.name
        amount = parsed.amount
      }
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (type === 'salary') {
        // –î–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ó–ê–†–ü–õ–ê–¢–ê"
        name = '–ó–ê–†–ü–õ–ê–¢–ê'
        amount = parseFloat(amountInput)
      } else {
        if (!nameInput.trim() || !amountInput) {
          haptics.error()
          return
        }
        name = nameInput.trim()
        amount = parseFloat(amountInput)
      }

      if (isNaN(amount) || amount <= 0) {
        haptics.error()
        return
      }
    }

    haptics.success()
    
    const [year, month, day] = date.split('-')
    const formattedDate = `${day}.${month}.${year}`

    const entry: any = {
      date: formattedDate,
      symbols: name
    }

    if (type === 'amount') {
      entry.amount = amount
    } else {
      entry.salary = amount
    }

    await addEntry(entry)
    setAddedCount(prev => prev + 1)
    setTodayTotal(prev => prev + amount)
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    await syncData()
    
    if (quickMode) {
      // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –æ—á–∏—â–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å
      setSingleInput('')
      setTimeout(() => inputRef.current?.focus(), 50)
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –æ—á–∏—â–∞–µ–º –ø–æ–ª—è –∏ –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      setNameInput('')
      setAmountInput('')
      navigate(`/day/${year}/${month}/${day}`)
    }
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && singleInput.trim()) {
      e.preventDefault()
      handleQuickAdd()
    } else if (e.key === 'Escape') {
      navigate(-1)
    }
  }


  return (
    <Box>
      {/* –•–µ–¥–µ—Ä */}
      <Stack direction="row" alignItems="center" spacing={1.5} mb={3}>
        <IconButton 
          size="small"
          onClick={() => navigate(-1)}
          sx={{ bgcolor: alpha('#667eea', 0.08) }}
        >
          <ArrowBack fontSize="small" sx={{ color: '#667eea' }} />
        </IconButton>
        <Box flex={1}>
          <Typography variant="h5" fontWeight={700}>
            –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
          </Typography>
          <Typography variant="caption" color="text.secondary">
            {addedCount > 0 ? `–î–æ–±–∞–≤–ª–µ–Ω–æ: ${addedCount} ‚Ä¢ +$${todayTotal.toLocaleString()}` : '–í–≤–µ–¥–∏ "—Å—É–º–º–∞ –∏–º—è" –∏–ª–∏ "–∏–º—è —Å—É–º–º–∞"'}
          </Typography>
        </Box>
        <IconButton
          onClick={() => navigate('/add/bulk')}
          sx={{ 
            bgcolor: alpha('#f093fb', 0.08),
            width: 48,
            height: 48
          }}
        >
          <ListAlt sx={{ color: '#f093fb', fontSize: 28 }} />
        </IconButton>
      </Stack>

      <Card sx={{ p: 2.5 }}>
        <Stack spacing={2.5}>
          {/* –†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
          <FormControlLabel
            control={
              <Switch 
                checked={quickMode} 
                onChange={(e) => setQuickMode(e.target.checked)}
                sx={{
                  '& .MuiSwitch-switchBase.Mui-checked': {
                    color: '#667eea',
                  },
                  '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {
                    backgroundColor: '#667eea',
                  },
                }}
              />
            }
            label={
              <Stack direction="row" spacing={0.5} alignItems="center">
                <FastForward fontSize="small" sx={{ color: quickMode ? '#667eea' : 'text.secondary' }} />
                <Typography variant="body2" fontSize="0.875rem" fontWeight={quickMode ? 600 : 400}>
                  –†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                </Typography>
              </Stack>
            }
          />

          {/* –¢–∏–ø */}
          <Box>
            <Typography variant="caption" fontWeight={600} color="text.secondary" mb={1} display="block" fontSize="0.7rem">
              –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            </Typography>
            <ToggleButtonGroup
              value={type}
              exclusive
              onChange={(e, val) => val && setType(val)}
              fullWidth
              size="small"
            >
              <ToggleButton 
                value="amount"
                sx={{
                  py: 1,
                  fontSize: '0.875rem',
                  fontWeight: type === 'amount' ? 700 : 500,
                  background: type === 'amount' ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' : 'white',
                  color: type === 'amount' ? 'white !important' : 'text.secondary',
                  border: `1px solid ${type === 'amount' ? 'transparent' : alpha('#000', 0.12)} !important`,
                }}
              >
                üí∞ –û–±–æ—Ä–æ—Ç
              </ToggleButton>
              <ToggleButton 
                value="salary"
                sx={{
                  py: 1,
                  fontSize: '0.875rem',
                  fontWeight: type === 'salary' ? 700 : 500,
                  background: type === 'salary' ? 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)' : 'white',
                  color: type === 'salary' ? 'white !important' : 'text.secondary',
                  border: `1px solid ${type === 'salary' ? 'transparent' : alpha('#000', 0.12)} !important`,
                }}
              >
                üíµ –ó–∞—Ä–ø–ª–∞—Ç–∞
              </ToggleButton>
            </ToggleButtonGroup>
          </Box>

          {/* –î–∞—Ç–∞ */}
          <Box>
            <Typography variant="caption" fontWeight={600} color="text.secondary" mb={1} display="block" fontSize="0.7rem">
              –î–∞—Ç–∞
            </Typography>
            <TextField
              fullWidth
              type="date"
              value={date}
              onChange={(e) => setDate(e.target.value)}
              size="small"
              sx={{
                '& .MuiInputBase-root': {
                  borderRadius: 2,
                  fontSize: '0.875rem'
                }
              }}
            />
          </Box>

          {/* –ü–æ–ª—è –≤–≤–æ–¥–∞ */}
          {quickMode ? (
            // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –µ–¥–∏–Ω–æ–µ –ø–æ–ª–µ
            <Box>
              <Typography variant="caption" fontWeight={600} color="text.secondary" mb={1} display="block" fontSize="0.7rem">
                {type === 'salary' ? '–°—É–º–º–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã' : '–ó–∞–ø–∏—Å—å (—Å—É–º–º–∞ + –∏–º—è)'}
              </Typography>
              <Autocomplete
                freeSolo
                options={clientSuggestions.map(name => `${name}`)}
                inputValue={singleInput}
                onInputChange={(e, val) => setSingleInput(val)}
                renderInput={(params) => (
                  <TextField
                    {...params}
                    inputRef={inputRef}
                    placeholder={type === 'salary' ? '5000' : '5000 –ò–≤–∞–Ω–æ–≤ –∏–ª–∏ –ò–≤–∞–Ω–æ–≤ 5000'}
                    size="small"
                    onKeyDown={handleKeyDown}
                    type={type === 'salary' ? 'number' : 'text'}
                    sx={{
                      '& .MuiInputBase-root': {
                        borderRadius: 2,
                        fontSize: '0.875rem'
                      }
                    }}
                  />
                )}
                renderOption={(props, option) => (
                  <li {...props} key={option}>
                    <Typography fontSize="0.875rem">{option}</Typography>
                  </li>
                )}
              />
              
              {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
              {clientSuggestions.length > 0 && !singleInput && (
                <Stack direction="row" spacing={0.5} mt={1} flexWrap="wrap">
                  <Typography variant="caption" color="text.secondary" fontSize="0.65rem" mr={0.5}>
                    –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:
                  </Typography>
                  {clientSuggestions.slice(0, 5).map(name => (
                    <Chip 
                      key={name}
                      label={name}
                      size="small"
                      onClick={() => setSingleInput(name + ' ')}
                      sx={{ 
                        height: 20, 
                        fontSize: '0.65rem',
                        cursor: 'pointer',
                        '&:hover': {
                          bgcolor: alpha('#667eea', 0.1)
                        }
                      }}
                    />
                  ))}
                </Stack>
              )}

              {/* –ü—Ä–µ–≤—å—é –ø–∞—Ä—Å–∏–Ω–≥–∞ */}
              {singleInput && (() => {
                if (type === 'salary') {
                  const amount = parseFloat(singleInput.trim())
                  if (!isNaN(amount) && amount > 0) {
                    return (
                      <Box 
                        mt={1} 
                        p={1.5} 
                        sx={{ 
                          bgcolor: alpha('#f093fb', 0.05),
                          borderRadius: 1.5,
                          border: `1px solid ${alpha('#f093fb', 0.2)}`
                        }}
                      >
                        <Stack direction="row" spacing={2} alignItems="center">
                          <Typography variant="caption" fontSize="0.7rem" color="text.secondary">
                            –ü—Ä–µ–≤—å—é:
                          </Typography>
                          <Typography variant="body2" fontSize="0.875rem" fontWeight={600}>
                            –ó–ê–†–ü–õ–ê–¢–ê
                          </Typography>
                          <Typography variant="body2" fontSize="0.875rem" fontWeight={700} sx={{ color: '#f093fb' }}>
                            ${amount.toLocaleString()}
                          </Typography>
                        </Stack>
                      </Box>
                    )
                  }
                } else {
                  const parsed = parseInput(singleInput)
                  if (parsed) {
                    return (
                      <Box 
                        mt={1} 
                        p={1.5} 
                        sx={{ 
                          bgcolor: alpha('#667eea', 0.05),
                          borderRadius: 1.5,
                          border: `1px solid ${alpha('#667eea', 0.2)}`
                        }}
                      >
                        <Stack direction="row" spacing={2} alignItems="center">
                          <Typography variant="caption" fontSize="0.7rem" color="text.secondary">
                            –ü—Ä–µ–≤—å—é:
                          </Typography>
                          <Typography variant="body2" fontSize="0.875rem" fontWeight={600}>
                            {parsed.name}
                          </Typography>
                          <Typography variant="body2" fontSize="0.875rem" fontWeight={700} sx={{ color: '#667eea' }}>
                            ${parsed.amount.toLocaleString()}
                          </Typography>
                        </Stack>
                      </Box>
                    )
                  }
                }
                return null
              })()}
            </Box>
          ) : (
            // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            <Stack spacing={2}>
              {type === 'amount' && (
                <Box>
                  <Typography variant="caption" fontWeight={600} color="text.secondary" mb={1} display="block" fontSize="0.7rem">
                    –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
                  </Typography>
                  <Autocomplete
                    freeSolo
                    options={clientSuggestions}
                    inputValue={nameInput}
                    onInputChange={(e, val) => setNameInput(val)}
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        inputRef={inputRef}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                        size="small"
                        sx={{
                          '& .MuiInputBase-root': {
                            borderRadius: 2,
                            fontSize: '0.875rem'
                          }
                        }}
                      />
                    )}
                  />
                </Box>
              )}
              <Box>
                <Typography variant="caption" fontWeight={600} color="text.secondary" mb={1} display="block" fontSize="0.7rem">
                  {type === 'salary' ? '–°—É–º–º–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã' : '–°—É–º–º–∞'}
                </Typography>
                <TextField
                  fullWidth
                  type="number"
                  value={amountInput}
                  onChange={(e) => setAmountInput(e.target.value)}
                  placeholder="0"
                  size="small"
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && amountInput && (type === 'salary' || nameInput.trim())) {
                      e.preventDefault()
                      handleQuickAdd()
                    }
                  }}
                  sx={{
                    '& .MuiInputBase-root': {
                      borderRadius: 2,
                      fontSize: '0.875rem'
                    }
                  }}
                />
                {type === 'salary' && (
                  <Typography variant="caption" color="text.secondary" fontSize="0.65rem" mt={0.5} display="block">
                    –ò–º—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ "–ó–ê–†–ü–õ–ê–¢–ê"
                  </Typography>
                )}
              </Box>
            </Stack>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <Button
            fullWidth
            variant="contained"
            size="large"
            disabled={
              quickMode 
                ? (type === 'salary' ? !singleInput.trim() : !parseInput(singleInput))
                : (type === 'amount' ? (!nameInput.trim() || !amountInput) : !amountInput)
            }
            onClick={handleQuickAdd}
            startIcon={<Check />}
            sx={{
              py: 1.25,
              borderRadius: 2,
              background: type === 'salary' 
                ? 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'
                : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              fontSize: '0.875rem',
              fontWeight: 700,
              textTransform: 'none',
              '&:disabled': {
                background: alpha('#000', 0.12)
              }
            }}
          >
            {quickMode ? '–î–æ–±–∞–≤–∏—Ç—å (Enter)' : '–î–æ–±–∞–≤–∏—Ç—å'}
          </Button>

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
          <Box 
            p={1.5} 
            sx={{ 
              bgcolor: alpha('#f093fb', 0.05),
              borderRadius: 1.5,
              border: `1px dashed ${alpha('#f093fb', 0.3)}`
            }}
          >
            <Typography variant="caption" fontSize="0.7rem" color="text.secondary">
              üí° <strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –í–≤–æ–¥–∏ "5000 –ò–≤–∞–Ω–æ–≤" –∏–ª–∏ "–ò–≤–∞–Ω–æ–≤ 5000" ‚Üí Enter ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç—Å—è –∏ –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            </Typography>
          </Box>
        </Stack>
      </Card>
    </Box>
  )
}
